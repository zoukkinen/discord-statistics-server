# Performance optimizations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # PostgreSQL database (used for both development and production)
  postgres:
    image: postgres:17-alpine
    container_name: assembly-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-discord_stats}
      - POSTGRES_USER=${DB_USER:-discord_bot}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-dev_password}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-discord_bot} -d ${DB_NAME:-discord_stats}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - discord-tracker

  discord-bot:
    build: 
      context: .
      args:
        NODE_ENV: development
    container_name: assembly-discord-tracker
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
      - "5173:5173"  # Vite dev server port
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - WEB_PORT=3000
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - DATABASE_URL=${DATABASE_URL:-postgresql://${DB_USER:-discord_bot}:${DB_PASSWORD:-dev_password}@postgres:5432/${DB_NAME:-discord_stats}}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-discord_stats}
      - DB_USER=${DB_USER:-discord_bot}
      - DB_PASSWORD=${DB_PASSWORD:-dev_password}
      - NODE_ENV=${NODE_ENV:-development}
      # NOTE: Event configuration is now managed through the admin interface at /admin
    volumes:
      - discord_data:/app/data
      # Development: Mount source files for hot reload and serving
      - ./frontend:/app/frontend:ro
      - ./public:/app/public:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - discord-tracker
    depends_on:
      postgres:
        condition: service_healthy

  # Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: assembly-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - discord-bot
    networks:
      - discord-tracker
    profiles:
      - production

  # Certbot for automatic SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: assembly-certbot
    restart: "no"
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - ./scripts:/scripts:ro
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - discord-tracker
    profiles:
      - production

volumes:
  discord_data:
    driver: local
  postgres_data:
    driver: local
  certbot_certs:
  certbot_www:
    driver: local

networks:
  discord-tracker:
    driver: bridge
